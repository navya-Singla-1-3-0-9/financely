<!DOCTYPE html>
<html lang="en">

<head>
    <title>Yoga Practice</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" type="text/css" href="/css/style.css">
    <link rel="stylesheet" type="text/css" href="/css/mobile.css">
    <link rel="stylesheet" type="text/css" href="/css/timer.css">
    <link rel="stylesheet" type="text/css" href="/css/gauge.css">
    <script type='text/javascript' src='/js/mobile.js'></script>
    <script type='text/javascript' src='/js/timer.js'></script>
    <!-- p5 -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/p5.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.dom.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.9.0/addons/p5.sound.min.js"></script>
    <!-- ml5 -->
    <script src="https://unpkg.com/ml5@0.4.3/dist/ml5.min.js"></script>
</head>
<script>
    const poseNumber = "<%=pose%>"
</script>
<body>
    
    <span id="timer">00:00:00</span>
    <br />
    <div id="controls">
        <div onclick="stopwatch.start();" class="timer-btn" id="start">Start</div>
        <div onclick="stopwatch.stop();" class="timer-btn" id="stop">Stop</div>
    </div>

    <div class="container">

        <div class="gauge-container">

            <svg class="gauge" viewBox="0 0 150 150" preserveAscpectRatio="xMinYMin Meet">
                <circle class="rail" r="67" cx="75" cy="75" />
                <circle class="progress" r="67" data-target="84" cx="75" cy="75" />
            </svg>
            <span class="center percentage"><span class="value" id="energyMeter"></span><span
                    class="percentSymbol"></span></span>

        </div>
        <h1>Energy Meter</h1>
        <div id="controls">
            <a href="/report/<%=pose%>">
            <div class="timer-btn" id="stop">Report</div>
            </a>
        </div>
        <script>
            let video;
            let poseNet;
            let pose;
            let skeleton;
            let brain;
            let Label;
            let poseLabel = "           ";
            let energy = 0;
            let posesList = {
                1: "Namaskar",
                2: "Warrior Pose 2",
                3: "Hastauttanasana",
                4: "Relax",
            }
            function setup() {
             
                var cnv = createCanvas(windowWidth, 400);
                cnv.position(350, 190);
                video = createCapture(VIDEO);
                video.hide();
                poseNet = ml5.poseNet(video, modelLoaded);
                poseNet.on('pose', gotPoses);

                let options = {
                    inputs: 34,
                    outputs: 4,
                    task: 'classification',
                    debug: true
                }
                brain = ml5.neuralNetwork(options);
                const modelInfo = {
                    //model: {"modelTopology":{"class_name":"Sequential","config":[{"class_name":"Dense","config":{"units":16,"activation":"sigmoid","use_bias":true,"kernel_initializer":{"class_name":"VarianceScaling","config":{"scale":1,"mode":"fan_avg","distribution":"normal","seed":null}},"bias_initializer":{"class_name":"Zeros","config":{}},"kernel_regularizer":null,"bias_regularizer":null,"activity_regularizer":null,"kernel_constraint":null,"bias_constraint":null,"name":"dense_Dense1","trainable":true,"batch_input_shape":[null,34],"dtype":"float32"}},{"class_name":"Dense","config":{"units":4,"activation":"softmax","use_bias":true,"kernel_initializer":{"class_name":"VarianceScaling","config":{"scale":1,"mode":"fan_avg","distribution":"normal","seed":null}},"bias_initializer":{"class_name":"Zeros","config":{}},"kernel_regularizer":null,"bias_regularizer":null,"activity_regularizer":null,"kernel_constraint":null,"bias_constraint":null,"name":"dense_Dense2","trainable":true}}],"keras_version":"tfjs-layers 1.2.2","backend":"tensor_flow.js"},"weightsManifest":[{"paths":["./model.weights.bin"],"weights":[{"name":"dense_Dense1/kernel","shape":[34,16],"dtype":"float32"},{"name":"dense_Dense1/bias","shape":[16],"dtype":"float32"},{"name":"dense_Dense2/kernel","shape":[16,4],"dtype":"float32"},{"name":"dense_Dense2/bias","shape":[4],"dtype":"float32"}]}]},
                   // metadata: {"data":{"inputMin":[128.01644897460938,-17.82646369934082,137.98544311523438,-33.530338287353516,119.57091522216797,-30.98084831237793,147.99574279785156,-23.622339248657227,107.9768295288086,-22.947050094604492,169.9237518310547,34.00382614135742,94.70130157470703,21.219940185546875,192.34481811523438,34.318206787109375,63.24971389770508,42.608821868896484,142.1532440185547,2.1769025325775146,3.304257869720459,-3.035536527633667,156.21385192871094,208.48684692382812,90.24291229248047,237.72425842285156,164.08750915527344,307.01922607421875,93.99830627441406,403.0643005371094,154.00848388671875,377.5404052734375,97.17547607421875,502.2016296386719],"inputMax":[439.3941650390625,195.0349578857422,446.3766174316406,186.4423370361328,427.0663757324219,185.24163818359375,461.5543518066406,193.88427734375,414.56298828125,195.9560546875,490.6623840332031,243.75291442871094,402.3577880859375,241.24252319335938,541.519775390625,314.8023986816406,390.3865966796875,315.9977111816406,634.77783203125,387.0021667480469,430.6712341308594,388.03314208984375,481.4254455566406,378.6090087890625,418.8351745605469,379.8546447753906,480.3165588378906,521.9304809570312,421.1213684082031,519.9122924804688,486.97930908203125,558.4111938476562,422.8478698730469,560.2490844726562],"outputMin":0,"outputMax":1},"meta":{"inputUnits":34,"outputUnits":4,"inputs":{"input0":{"dtype":"number"},"input1":{"dtype":"number"},"input2":{"dtype":"number"},"input3":{"dtype":"number"},"input4":{"dtype":"number"},"input5":{"dtype":"number"},"input6":{"dtype":"number"},"input7":{"dtype":"number"},"input8":{"dtype":"number"},"input9":{"dtype":"number"},"input10":{"dtype":"number"},"input11":{"dtype":"number"},"input12":{"dtype":"number"},"input13":{"dtype":"number"},"input14":{"dtype":"number"},"input15":{"dtype":"number"},"input16":{"dtype":"number"},"input17":{"dtype":"number"},"input18":{"dtype":"number"},"input19":{"dtype":"number"},"input20":{"dtype":"number"},"input21":{"dtype":"number"},"input22":{"dtype":"number"},"input23":{"dtype":"number"},"input24":{"dtype":"number"},"input25":{"dtype":"number"},"input26":{"dtype":"number"},"input27":{"dtype":"number"},"input28":{"dtype":"number"},"input29":{"dtype":"number"},"input30":{"dtype":"number"},"input31":{"dtype":"number"},"input32":{"dtype":"number"},"input33":{"dtype":"number"}},"outputs":{"output0":{"dtype":"string","uniqueValues":["1","2","3","4"],"legend":{"1":[1,0,0,0],"2":[0,1,0,0],"3":[0,0,1,0],"4":[0,0,0,1]}}},"isNormalized":true}},
                   model:"/model.json",
                   metadata: "/model_meta.json", 
                   weights:"/model.weights.bin",
                };
                console.log(modelInfo);
                brain.load(modelInfo, brainLoaded);
            }

            function brainLoaded() {
                console.log('pose classification ready!');
                classifyPose();
            }

            function classifyPose() {
                if (pose) {
                    let inputs = [];
                    for (let i = 0; i < pose.keypoints.length; i++) {
                        let x = pose.keypoints[i].position.x;
                        let y = pose.keypoints[i].position.y;
                        inputs.push(x);
                        inputs.push(y);
                    }
                    brain.classify(inputs, gotResult);
                } else {
                    setTimeout(classifyPose, 100);
                }
            }

            function gotResult(error, results) {
               // console.log(results);
                if (results[0].confidence > 0.75) {
                    Label = results[0].label.toUpperCase();
                }

                console.log(Label);
                poseLabel = "           " + posesList[Label];
                console.log(Label);
                if (poseNumber == Label) {
                    console.log("Same");
                    console.log("incremented energy")
                    energy += 0.5;
                    document.getElementById("energyMeter").innerHTML = energy;
                    localStorage.setItem("energy", energy);

                }
                classifyPose();
            }


            function gotPoses(poses) {
                if (poses.length > 0) {
                    pose = poses[0].pose;
                    skeleton = poses[0].skeleton;
                }
            }

            function modelLoaded() {
                console.log('poseNet ready');
            }

            function draw() {
                push();
                translate(video.width, 0);
                scale(-1, 1);
                image(video, 0, 0, video.width, video.height);

                if (pose) {
                    for (let i = 0; i < skeleton.length; i++) {
                        let a = skeleton[i][0];
                        let b = skeleton[i][1];
                        strokeWeight(2);
                        stroke(0);

                        line(a.position.x, a.position.y, b.position.x, b.position.y);
                    }
                    for (let i = 0; i < pose.keypoints.length; i++) {
                        let x = pose.keypoints[i].position.x;
                        let y = pose.keypoints[i].position.y;
                        fill(0);
                        stroke(255);
                        ellipse(x, y, 16, 16);
                    }
                }
                pop();

                fill(0, 255, 0);
                noStroke();
                textSize(50);
                textAlign(CENTER, CENTER);
                // text(poseLabel, width/4 , height/2 );
            }


        </script>
</body>

</html>